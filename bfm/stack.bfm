! routines for an indefinite stack growing to the right
! each stack item requires two cells: the value itself and a marker
! marker is always one when occupied or zero when not occupied

! requirements: declare a top of stack as your rightmost register and leave
! one empty cell to its left so that we can scroll to the beginning and end of
! the stack without trashing other registers

! scroll from any value cell in the stack to the bottom
! ends on the value cell below the stack
scrolldown() = > [>>] < ;

! scroll from any value cell in the stack to the top
! ends on the top of stack and locates pointer
scrollup(top) = > [<<] > at(top) ;

! move a stack item deeper down
stackdown() = [->>+<<] < ;
celldown() = stackdown() stackdown() ;

! move a stack item shallower
stackup() = [-<<+>>] > ;
cellup() = stackup() stackup() ;

! move a stack item two spaces deeper
stackdown2() = [->>>>+<<<<] < ;
celldown2() = stackdown2() stackdown2() ;

! move a stack item two spaces shallower
stackup2() = [-<<<<+>>>>] > ;
cellup2() = stackup2() stackup2() ;

! deepen the stack and make room on top
unshift(top) = to(top) scrolldown() < [ celldown() ] > at(top) >+< ;

! destroy the top of stack and shift everything down
shift(top) = zero(top) > [-] > [ cellup() ] <<<< scrollup(top) ;

! push register to top of stack
push(top,r) = unshift(top) move(r,top) ;

! pop top of stack to a register
pop(top,r) = move(top,r) shift(top) ;
